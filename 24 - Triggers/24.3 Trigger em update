üîÅ Trigger em UPDATE ‚Äî SQL
‚úÖ O que √©?
√â uma trigger que √© executada automaticamente quando uma linha √© atualizada em uma tabela.

üëâ Pode ser usada para:

Registrar altera√ß√µes

Validar mudan√ßas

Atualizar outras tabelas automaticamente

üõ†Ô∏è Exemplo pr√°tico: Log de altera√ß√µes de e-mail
Suponha a tabela clientes:
sql
Copiar
Editar
CREATE TABLE clientes (
  id SERIAL PRIMARY KEY,
  nome TEXT,
  email TEXT
);
E a tabela de log:

sql
Copiar
Editar
CREATE TABLE log_email_update (
  cliente_id INT,
  email_antigo TEXT,
  email_novo TEXT,
  data_alteracao TIMESTAMP
);
üîß Criando a fun√ß√£o da trigger:
sql
Copiar
Editar
CREATE OR REPLACE FUNCTION logar_update_email()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.email IS DISTINCT FROM OLD.email THEN
    INSERT INTO log_email_update(cliente_id, email_antigo, email_novo, data_alteracao)
    VALUES (OLD.id, OLD.email, NEW.email, now());
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
‚öôÔ∏è Criando a trigger:
sql
Copiar
Editar
CREATE TRIGGER trigger_log_email
AFTER UPDATE ON clientes
FOR EACH ROW
EXECUTE FUNCTION logar_update_email();
üß™ Testando:
sql
Copiar
Editar
UPDATE clientes
SET email = 'novo@email.com'
WHERE id = 1;
üí° Resultado: uma linha ser√° adicionada na tabela log_email_update com os dados do email antigo e do novo.

‚ö†Ô∏è Pontos de aten√ß√£o
OLD = valores antes da atualiza√ß√£o

NEW = valores depois da atualiza√ß√£o

Use IS DISTINCT FROM em vez de <> para comparar nulos com seguran√ßa

Triggers podem impactar performance em grandes volumes de atualiza√ß√£o

üß† Dica
Use triggers de UPDATE quando for cr√≠tico manter hist√≥rico de altera√ß√µes ou valida√ß√µes autom√°ticas, como em sistemas financeiros, m√©dicos ou administrativos.

