üö® Overview: Triggers em Bancos de Dados
‚úÖ O que √© uma trigger?
Uma trigger (ou gatilho) √© um comando autom√°tico que o banco executa quando algo acontece numa tabela.

üîπ Pode ser ativada ao:

Inserir (INSERT)

Atualizar (UPDATE)

Excluir (DELETE)

üõ†Ô∏è Pra que serve?
Usamos triggers para:

Auditar a√ß√µes (ex: registrar quem fez uma altera√ß√£o)

Validar regras de neg√≥cio

Atualizar outras tabelas automaticamente

Evitar inconsist√™ncias

üì¶ Exemplo pr√°tico
Suponha que temos uma tabela clientes e uma tabela log_alteracoes.

sql
Copiar
Editar
CREATE TABLE log_alteracoes (
  cliente_id INT,
  data_alteracao TIMESTAMP,
  campo_alterado TEXT
);
Criando uma trigger que registra toda altera√ß√£o no campo "email":

sql
Copiar
Editar
CREATE OR REPLACE FUNCTION log_update_email()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.email <> OLD.email THEN
    INSERT INTO log_alteracoes(cliente_id, data_alteracao, campo_alterado)
    VALUES (OLD.id, now(), 'email');
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
Associando √† tabela clientes:

sql
Copiar
Editar
CREATE TRIGGER gatilho_email
AFTER UPDATE ON clientes
FOR EACH ROW
EXECUTE FUNCTION log_update_email();
‚ö†Ô∏è Pontos de aten√ß√£o
Triggers rodam automaticamente, ent√£o cuidado com efeitos inesperados.

Podem impactar a performance se forem mal planejadas.

Triggers s√£o dif√≠ceis de testar e depurar se voc√™ n√£o souber exatamente o que est√° acontecendo no banco.

Evite l√≥gica muito complexa dentro de triggers.

üß† Dica
Use triggers com prop√≥sito claro. Para a√ß√µes simples, √†s vezes vale mais usar c√≥digo da aplica√ß√£o (backend) do que complicar com gatilhos no banco.

