üîÑ CTE Recursiva: O que √©?
Uma CTE recursiva √© uma Common Table Expression que se chama a si mesma, permitindo repetir uma consulta at√© que uma condi√ß√£o de parada seja atingida.

Muito usada para trabalhar com dados hier√°rquicos, estruturas em √°rvore, grafos, ou qualquer situa√ß√£o onde um registro depende de outro.

Estrutura b√°sica de uma CTE recursiva
sql
Copiar
Editar
WITH RECURSIVE nome_cte AS (
  -- Parte n√£o recursiva (caso base)
  SELECT ... FROM tabela WHERE condi√ß√£o_inicial

  UNION ALL

  -- Parte recursiva (auto-refer√™ncia usando o nome da CTE)
  SELECT ... FROM tabela JOIN nome_cte ON condi√ß√£o_de_recurs√£o
)
SELECT * FROM nome_cte;
Passo a passo
Parte n√£o recursiva: define o ponto de partida (exemplo: o n√≥ raiz da hierarquia).

Parte recursiva: seleciona registros relacionados com os que j√° foram obtidos, unindo a tabela original com a CTE, criando uma ‚Äúcadeia‚Äù.

A query vai se chamando at√© que n√£o existam mais registros que satisfa√ßam a condi√ß√£o.

Exemplo pr√°tico: Hierarquia de funcion√°rios
Tabela funcionarios:

id	nome	id_gerente
1	Jo√£o	NULL
2	Maria	1
3	Carlos	1
4	Ana	2
5	Pedro	2

Queremos listar Jo√£o e todos os subordinados em todos os n√≠veis.

SQL usando CTE recursiva
sql
Copiar
Editar
WITH RECURSIVE subordinados AS (
  -- Caso base: seleciona o gerente inicial
  SELECT id, nome, id_gerente
  FROM funcionarios
  WHERE id = 1

  UNION ALL

  -- Parte recursiva: encontra subordinados do gerente atual
  SELECT f.id, f.nome, f.id_gerente
  FROM funcionarios f
  INNER JOIN subordinados s ON f.id_gerente = s.id
)
SELECT * FROM subordinados;
Resultado esperado
id	nome	id_gerente
1	Jo√£o	NULL
2	Maria	1
3	Carlos	1
4	Ana	2
5	Pedro	2

Por que usar CTE recursiva?
Facilita trabalhar com dados hier√°rquicos.

Evita consultas complexas e repetitivas.

Muito √∫til em bancos que suportam recurs√£o (PostgreSQL, SQL Server, Oracle, etc).
