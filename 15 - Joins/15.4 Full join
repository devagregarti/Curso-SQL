üéØ T√≥pico: FULL JOIN
‚úÖ Objetivo:
Entender o FULL JOIN, que retorna todos os registros de ambas as tabelas (esquerda e direita), combinando os dados quando poss√≠vel, e preenchendo com NULL quando n√£o houver correspond√™ncia.

1. O que √© FULL JOIN?
Retorna todos os registros da tabela da esquerda +

todos os registros da tabela da direita

Combina os registros quando h√° correspond√™ncia (na condi√ß√£o ON)

Preenche com NULL as colunas da outra tabela quando n√£o h√° correspond√™ncia

2. Para que serve?
Quando queremos listar todos os dados de duas tabelas, mesmo que alguns registros n√£o tenham correspond√™ncia do outro lado.

Exemplo do dia a dia: listar todos os clientes e todos os pedidos, mesmo que alguns clientes n√£o tenham pedido e alguns pedidos n√£o tenham cliente (dados faltando ou incompletos).

3. Sintaxe b√°sica:
sql
Copy
Edit
SELECT t1.coluna1, t2.coluna2
FROM tabela1 t1
FULL JOIN tabela2 t2
ON t1.coluna_chave = t2.coluna_chave;
4. Exemplo pr√°tico:
Tabelas:

clientes (cliente_id, nome)

pedidos (pedido_id, cliente_id, valor)

Queremos listar todos os clientes e todos os pedidos, juntando as informa√ß√µes quando houver liga√ß√£o:

sql
Copy
Edit
SELECT c.nome, p.pedido_id, p.valor
FROM clientes c
FULL JOIN pedidos p
ON c.cliente_id = p.cliente_id;
Resultado:

Aparece todo cliente, mesmo se n√£o tiver pedido (pedido_id e valor ser√£o NULL).

Aparece todo pedido, mesmo se n√£o tiver cliente (nome ser√° NULL).

5. Quando usar?
Em relat√≥rios onde √© necess√°rio combinar dados completos de duas fontes diferentes, sem perder nenhum registro.

√â uma jun√ß√£o completa.

Resumo para o v√≠deo:
FULL JOIN une todas as linhas das duas tabelas, com correspond√™ncia ou n√£o.

Se n√£o tem correspond√™ncia, preenche com NULL.

√ötil para garantir que nenhum dado seja ignorado.

