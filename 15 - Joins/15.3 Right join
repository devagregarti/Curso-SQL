üéØ T√≥pico: RIGHT JOIN
‚úÖ Objetivo:
Entender o RIGHT JOIN, que retorna todos os registros da tabela da direita e os correspondentes da tabela da esquerda (se existirem). Se n√£o houver correspond√™ncia, a tabela da esquerda mostra NULL.

1. O que √© RIGHT JOIN?
Retorna todos os registros da tabela da direita

E os registros da tabela da esquerda que batem com a condi√ß√£o.

Se n√£o houver correspond√™ncia, os campos da tabela da esquerda aparecem como NULL.

2. Por que usar RIGHT JOIN?
Quando queremos garantir que todos os dados da tabela da direita apare√ßam, mesmo que n√£o tenham rela√ß√£o na tabela da esquerda.

Exemplo: listar todos os pedidos, mesmo que n√£o tenham cliente cadastrado (por erro ou dados incompletos).

3. Sintaxe b√°sica:
sql
Copy
Edit
SELECT t1.coluna1, t2.coluna2
FROM tabela1 t1
RIGHT JOIN tabela2 t2
ON t1.coluna_chave = t2.coluna_chave;
4. Exemplo pr√°tico:
Tabelas:

clientes (cliente_id, nome)

pedidos (pedido_id, cliente_id, valor)

Queremos listar todos os pedidos e os dados dos clientes que fizeram esses pedidos, incluindo pedidos sem cliente (dados faltando):

sql
Copy
Edit
SELECT c.nome, p.pedido_id, p.valor
FROM clientes c
RIGHT JOIN pedidos p
ON c.cliente_id = p.cliente_id;
O que acontece?

Todos os pedidos aparecem, mesmo que n√£o tenham cliente correspondente.

Para pedidos sem cliente, o campo nome aparece como NULL.

5. Dica r√°pida:
RIGHT JOIN √© menos usado que LEFT JOIN, mas √© √∫til para garantir que todos os dados da tabela da direita sejam listados.

Resumo r√°pido para v√≠deo:
RIGHT JOIN traz todos os registros da tabela da direita e os correspondentes da esquerda.

Se n√£o houver correspond√™ncia, campos da esquerda ficam NULL.

Ideal para mostrar todos os dados de uma tabela principal (direita) com informa√ß√µes relacionadas, se houver.