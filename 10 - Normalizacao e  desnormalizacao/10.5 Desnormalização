üîÅ Introdu√ß√£o √† Desnormaliza√ß√£o
O que √© Desnormaliza√ß√£o?
Desnormaliza√ß√£o √© o processo inverso da normaliza√ß√£o: consiste em combinar tabelas ou duplicar dados de prop√≥sito para melhorar o desempenho em determinadas situa√ß√µes.

A ideia √© otimizar consultas, mesmo que isso signifique abrir m√£o de parte da estrutura ideal.

Por que desnormalizar?
Em sistemas com muitas consultas complexas e lentas, a normaliza√ß√£o pode exigir muitos JOINs, o que afeta a performance.

A desnormaliza√ß√£o reduz o n√∫mero de JOINs necess√°rios, tornando a leitura de dados mais r√°pida.

√ötil em sistemas de leitura intensa, como relat√≥rios ou dashboards.

Onde a desnormaliza√ß√£o ajuda?
Em sistemas que precisam de respostas r√°pidas com grandes volumes de dados.

Em data warehouses, onde a prioridade √© leitura r√°pida, n√£o inser√ß√µes constantes.

Em ambientes com an√°lises complexas, como BI (Business Intelligence).

Exemplo pr√°tico
Em vez de separar cliente e cidade em tabelas diferentes, voc√™ pode repetir o nome da cidade direto na tabela de clientes, assim evita um JOIN.

sql
Copy
Edit
-- Em vez de fazer isso:
SELECT c.nome, ci.nome
FROM clientes c
JOIN cidades ci ON c.cidade_id = ci.id;

-- Voc√™ j√° armazena o nome da cidade em 'clientes':
SELECT nome, cidade_nome FROM clientes;
Cuidado com a desnormaliza√ß√£o
Pode causar redund√¢ncia de dados.

Pode aumentar o risco de inconsist√™ncia (ex: atualizar um dado em um lugar, mas esquecer de outro).

Deve ser usada com planejamento, analisando a real necessidade.

Conclus√£o
A desnormaliza√ß√£o n√£o √© um erro ‚Äî √© uma decis√£o t√©cnica, feita com base em desempenho e necessidade.

O ideal √© normalizar para garantir integridade, e desnormalizar apenas onde for necess√°rio por quest√µes de performance.