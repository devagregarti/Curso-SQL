üí° Exemplos Pr√°ticos de Transa√ß√µes em SQL
Exemplo 1: Transfer√™ncia banc√°ria entre contas
Suponha que temos uma tabela contas com colunas id e saldo.

sql
Copiar
Editar
CREATE TABLE contas (
  id INT PRIMARY KEY,
  saldo NUMERIC
);
Queremos transferir 100 unidades da conta 1 para a conta 2. Isso deve ser feito como uma transa√ß√£o, para garantir que nenhuma parte fique incompleta.

Passo a passo com transa√ß√£o:
sql
Copiar
Editar
BEGIN;

UPDATE contas
SET saldo = saldo - 100
WHERE id = 1;

UPDATE contas
SET saldo = saldo + 100
WHERE id = 2;

COMMIT;
Se algo der errado (exemplo: saldo insuficiente), podemos fazer:

sql
Copiar
Editar
ROLLBACK;
Exemplo 2: Inserindo dados com rollback em erro
sql
Copiar
Editar
BEGIN;

INSERT INTO clientes (id, nome) VALUES (1, 'Jo√£o');
INSERT INTO clientes (id, nome) VALUES (1, 'Maria'); -- Erro: id duplicado

COMMIT;
Nesse caso, a segunda inser√ß√£o falha por causa do id duplicado e a transa√ß√£o n√£o √© confirmada. Se o banco suportar, voc√™ pode:

sql
Copiar
Editar
ROLLBACK;
E o banco volta ao estado anterior, sem nenhum cliente inserido.

Exemplo 3: Usando SAVEPOINT para controle parcial
sql
Copiar
Editar
BEGIN;

INSERT INTO pedidos (id, produto) VALUES (1, 'Camisa');

SAVEPOINT antes_do_pagamento;

INSERT INTO pagamentos (id_pedido, status) VALUES (1, 'Pendente');

-- Se o pagamento falhar:
ROLLBACK TO SAVEPOINT antes_do_pagamento;

-- Corrige o problema e continua

COMMIT;
‚ö†Ô∏è Dicas finais
Sempre inicie a transa√ß√£o com BEGIN.

Use COMMIT para salvar tudo.

Use ROLLBACK para desfazer se algo n√£o sair como esperado.

SAVEPOINT ajuda a controlar transa√ß√µes longas e complexas.
