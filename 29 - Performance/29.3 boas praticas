üöÄ Boas Pr√°ticas para Performance em SQL (PostgreSQL)
üìå Por que se preocupar com performance?
Consultas mal feitas podem deixar o sistema lento.

Em sistemas com muitos usu√°rios, isso pode causar travamentos.

Melhorar a performance reduz o uso do servidor e melhora a experi√™ncia do usu√°rio.

N√£o basta ‚Äúfuncionar‚Äù ‚Äî tem que funcionar r√°pido e bem.

üõ†Ô∏è Boas pr√°ticas fundamentais
1. Use apenas as colunas que voc√™ precisa
Evite SELECT *, que traz todas as colunas, mesmo as que n√£o s√£o usadas.

Isso gasta mais mem√≥ria e pode deixar tudo mais lento.

üß† Exemplo:
sql
Copy
Edit
-- Ruim:
SELECT * FROM clientes;

-- Melhor:
SELECT nome, cidade FROM clientes;
2. Sempre que poss√≠vel, use WHERE
Sem WHERE, o banco precisa olhar todas as linhas.

Com WHERE, ele pode ir direto ao que interessa.

üß† Exemplo:
sql
Copy
Edit
-- Evite isso:
SELECT * FROM pedidos;

-- Prefira:
SELECT * FROM pedidos WHERE status = 'Entregue';
3. Crie √≠ndices nas colunas certas
√çndices ajudam o banco a encontrar dados mais r√°pido.

Crie √≠ndices nas colunas mais usadas em filtros (WHERE), jun√ß√µes (JOIN) ou ordena√ß√µes (ORDER BY).

üß† Exemplo:
sql
Copy
Edit
CREATE INDEX idx_status ON pedidos(status);
‚ö†Ô∏è Mas cuidado: muitos √≠ndices demais podem deixar os inserts e updates mais lentos.

4. Use LIMIT ao testar ou buscar poucos dados
Quando voc√™ s√≥ precisa ver alguns resultados, use LIMIT para evitar sobrecarregar a consulta.

üß† Exemplo:
sql
Copy
Edit
SELECT * FROM clientes LIMIT 10;
5. Evite fun√ß√µes nas colunas de filtro
Usar fun√ß√µes nas colunas do WHERE impede o uso de √≠ndices.

üß† Exemplo:
sql
Copy
Edit
-- Evite:
SELECT * FROM clientes WHERE UPPER(cidade) = 'DUBLIN';

-- Prefira:
SELECT * FROM clientes WHERE cidade = 'Dublin';
6. Evite subconsultas desnecess√°rias
Subconsultas podem ser √∫teis, mas √†s vezes um JOIN simples resolve melhor.

üß† Exemplo:
sql
Copy
Edit
-- Em vez disso:
SELECT nome FROM clientes WHERE id IN (SELECT cliente_id FROM pedidos);

-- Prefira:
SELECT c.nome FROM clientes c
JOIN pedidos p ON c.id = p.cliente_id;
7. Use tipos de dados apropriados
Use o tipo de dado certo para cada coluna: INTEGER, TEXT, DATE, etc.

Tipos certos ocupam menos espa√ßo e facilitam o trabalho do banco.

8. Remova dados desnecess√°rios
Tabelas gigantes com dados que n√£o s√£o mais usados prejudicam a performance.

Considere arquivar ou excluir dados antigos quando poss√≠vel.

9. Evite ORDER BY desnecess√°rio
Ordenar dados consome tempo e mem√≥ria.

S√≥ use ORDER BY quando for realmente necess√°rio.

10. Analise e otimize consultas com EXPLAIN ANALYZE
Use EXPLAIN ANALYZE para entender como o banco executa a consulta.

Com isso, voc√™ pode identificar gargalos de performance.

‚úÖ Resumo
Boas pr√°ticas evitam lentid√£o e travamentos.

Use apenas o que voc√™ precisa, filtre bem e use √≠ndices com intelig√™ncia.

Otimize desde o in√≠cio ‚Äî fica mais dif√≠cil corrigir depois.

Performance √© responsabilidade de quem escreve o SQL, n√£o s√≥ do servidor.