Aula: Exemplo com Particionamento por HASH no PostgreSQL
‚úÖ O que √© particionamento por HASH?
√â quando a tabela √© dividida em v√°rias partes (parti√ß√µes), com base em um c√°lculo autom√°tico feito pelo banco.

Esse c√°lculo usa uma fun√ß√£o de hash (uma f√≥rmula interna) sobre o valor de uma coluna.

üß† Quando usar HASH?
Quando voc√™ tem muitos dados espalhados e quer distribu√≠-los de forma balanceada entre v√°rias parti√ß√µes.

√ötil quando n√£o d√° para usar LIST ou RANGE, porque os valores s√£o muito variados ou imprevis√≠veis.

üß± Exemplo pr√°tico: pedidos por CPF do cliente
Vamos criar uma tabela de pedidos que ser√° dividida com base no CPF do cliente (ou qualquer outro identificador √∫nico).

1. Criando a tabela principal (com particionamento por HASH)
sql
Copy
Edit
CREATE TABLE pedidos (
  id SERIAL PRIMARY KEY,
  cliente TEXT NOT NULL,
  cpf TEXT NOT NULL
) PARTITION BY HASH (cpf);
Explicando:

A coluna cpf ser√° usada para calcular em qual parti√ß√£o cada pedido vai ficar.

O PostgreSQL faz esse c√°lculo automaticamente, usando o valor do cpf.

2. Criando as parti√ß√µes
No particionamento por HASH, precisamos dizer quantas parti√ß√µes teremos.

Vamos criar 4 parti√ß√µes, por exemplo:

sql
Copy
Edit
CREATE TABLE pedidos_hash_0 PARTITION OF pedidos
FOR VALUES WITH (MODULUS 4, REMAINDER 0);

CREATE TABLE pedidos_hash_1 PARTITION OF pedidos
FOR VALUES WITH (MODULUS 4, REMAINDER 1);

CREATE TABLE pedidos_hash_2 PARTITION OF pedidos
FOR VALUES WITH (MODULUS 4, REMAINDER 2);

CREATE TABLE pedidos_hash_3 PARTITION OF pedidos
FOR VALUES WITH (MODULUS 4, REMAINDER 3);
Explicando os termos:

MODULUS 4 = total de parti√ß√µes que vamos usar.

REMAINDER = identifica cada parti√ß√£o.

O PostgreSQL calcula: HASH(cpf) % 4, e o resultado define em qual parti√ß√£o o dado vai.

‚úçÔ∏è Inserindo dados
sql
Copy
Edit
INSERT INTO pedidos (cliente, cpf) VALUES
('Jo√£o', '111.111.111-11'),
('Maria', '222.222.222-22'),
('Carlos', '333.333.333-33'),
('Fernanda', '444.444.444-44');
Voc√™ n√£o precisa se preocupar com qual parti√ß√£o ser√° usada ‚Äî o PostgreSQL cuida disso automaticamente.

üîç Consultando os dados
Consulta normal:

sql
Copy
Edit
SELECT * FROM pedidos;
Consulta com filtro:

sql
Copy
Edit
SELECT * FROM pedidos WHERE cpf = '222.222.222-22';
Consulta por parti√ß√£o (opcional):

sql
Copy
Edit
SELECT * FROM pedidos_hash_2;
üß† Por que usar HASH?
Quando n√£o h√° uma ordem natural ou valores fixos nos dados.

Quando voc√™ quer balancear o volume de dados entre parti√ß√µes.

Quando os dados n√£o se encaixam bem nos modelos de RANGE ou LIST.

‚ö†Ô∏è Cuidados com particionamento por HASH
N√£o d√° para saber facilmente em qual parti√ß√£o est√° um determinado dado.

√â o PostgreSQL que decide, baseado no resultado do hash.

Se mudar o n√∫mero de parti√ß√µes, ser√° necess√°rio reorganizar os dados (isso n√£o √© autom√°tico).

üßº Boas pr√°ticas
Use HASH quando:

Os dados s√£o muito variados.

N√£o h√° uma l√≥gica clara para dividir os dados por lista ou por intervalo.

Voc√™ quer distribuir bem a carga de trabalho entre as parti√ß√µes.

üîö Conclus√£o
O particionamento por HASH √© autom√°tico e ajuda a manter boa performance com grandes volumes de dados.

√â simples de usar: voc√™ s√≥ define a coluna e o n√∫mero de parti√ß√µes.

√ìtimo para situa√ß√µes em que voc√™ n√£o pode prever os valores dos dados.