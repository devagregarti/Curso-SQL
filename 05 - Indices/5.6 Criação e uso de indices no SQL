✅ 1. Criação da Tabela produtos
Essa tabela terá colunas que se encaixam bem com cada tipo de índice:

sql
Copy
Edit
CREATE TABLE produtos (
    id SERIAL PRIMARY KEY,
    nome TEXT,
    preco NUMERIC,
    tags TEXT[],              -- para GIN
    localizacao POINT         -- para GiST
);
✅ 2. Inserção de Dados
Vamos inserir 1.000 linhas com dados simulados. No seu ambiente real, gere esses dados com uma linguagem como Python ou use a extensão generate_series.

Aqui vai uma versão compacta:

sql
Copy
Edit
INSERT INTO produtos (nome, preco, tags, localizacao)
SELECT
    'Produto ' || g,
    round(random() * 100, 2),
    ARRAY[
        (ARRAY['eletronico', 'livro', 'roupa', 'brinquedo'])[floor(random() * 4 + 1)::int],
        (ARRAY['novo', 'usado'])[floor(random() * 2 + 1)::int]
    ],
    point(random() * 180 - 90, random() * 180 - 90)
FROM generate_series(1, 1000) AS g;

✅ 3. Consultas SEM índice para medir desempenho base
Use EXPLAIN ANALYZE para ver o tempo de execução:

B-tree (ordenado, exato):
sql
Copy
Edit
EXPLAIN ANALYZE
SELECT * FROM produtos WHERE preco = 50.00;
Hash (igualdade pura):
sql
Copy
Edit
EXPLAIN ANALYZE
SELECT * FROM produtos WHERE nome = 'Produto 500';
GIN (array com operador @>):
sql
Copy
Edit
EXPLAIN ANALYZE
SELECT * FROM produtos WHERE tags @> ARRAY['eletronico'];
GiST (busca espacial por proximidade):
sql
Copy
Edit
EXPLAIN ANALYZE
SELECT * FROM produtos
WHERE localizacao <@ circle( point(0, 0), 50 );

✅ 4. Criação dos Índices
sql
Copy
Edit
-- Índice B-tree padrão em preco
CREATE INDEX idx_btree_preco ON produtos(preco);

-- Índice Hash em nome (exige ativar suporte no PostgreSQL)
CREATE INDEX idx_hash_nome ON produtos USING HASH(nome);

-- Índice GIN para array de tags
CREATE INDEX idx_gin_tags ON produtos USING GIN(tags);

-- Índice GiST para localização com tipo POINT
CREATE INDEX idx_gist_localizacao ON produtos USING GiST(localizacao);
✅ 5. Consultas COM índice e comparação de desempenho
Repita as consultas do passo 3. Agora com os índices, o plano de execução (EXPLAIN ANALYZE) deve mostrar que os índices estão sendo utilizados.

Por exemplo:

sql
Copy
Edit
EXPLAIN ANALYZE
SELECT * FROM produtos WHERE preco = 50.00;

EXPLAIN ANALYZE
SELECT * FROM produtos WHERE nome = 'Produto 500';

EXPLAIN ANALYZE
SELECT * FROM produtos WHERE tags @> ARRAY['eletronico'];

EXPLAIN ANALYZE
SELECT * FROM produtos
WHERE localizacao <@ circle( point(0, 0), 50 );
Você verá diferenças como:

Tipo de plano: Index Scan ao invés de Seq Scan

Tempo menor de execução

Uso explícito do índice criado (ver no plano)

