üîπ Combina√ß√£o de Constraints em SQL
Em SQL, voc√™ pode aplicar v√°rias constraints ao mesmo tempo em uma coluna ou tabela. Isso permite que voc√™ defina regras mais r√≠gidas e seguras para os dados que ser√£o armazenados.

üß± Exemplo Real
Imagine uma tabela de usu√°rios:

sql
Copy
Edit
CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    idade INT CHECK (idade >= 18),
    data_cadastro DATE DEFAULT CURRENT_DATE
);
O que est√° acontecendo aqui?
PRIMARY KEY: o id √© √∫nico e obrigat√≥rio.

NOT NULL: nome e email n√£o podem ficar vazios.

UNIQUE: o email n√£o pode se repetir.

CHECK: a idade precisa ser 18 ou mais.

DEFAULT: se n√£o informarmos data_cadastro, ele preenche com a data atual.

‚û°Ô∏è Todas essas constraints est√£o combinadas para garantir a integridade dos dados.

üß™ Outra Forma ‚Äì Definindo no final da tabela
Voc√™ tamb√©m pode combinar constraints declarando no fim da tabela:

sql
Copy
Edit
CREATE TABLE produtos (
    id SERIAL,
    nome TEXT,
    preco NUMERIC,
    CONSTRAINT pk_produto_id PRIMARY KEY (id),
    CONSTRAINT nome_unico UNIQUE (nome),
    CONSTRAINT preco_min CHECK (preco >= 0)
);
‚úÖ Dicas de Boas Pr√°ticas
Combinar NOT NULL com DEFAULT √© muito comum, por exemplo:

sql
Copy
Edit
status TEXT NOT NULL DEFAULT 'ativo'
Evite repetir l√≥gica da aplica√ß√£o no banco, mas use constraints para proteger contra erros e dados inv√°lidos.

Nomes claros para constraints ajudam na manuten√ß√£o (ex: chk_idade_minima, uq_email_usuario etc).

