üîÅ Estruturas de Repeti√ß√£o no PL/pgSQL
‚úÖ O que s√£o estruturas de repeti√ß√£o (loops)?
S√£o comandos que permitem repetir uma ou mais a√ß√µes v√°rias vezes.

Muito √∫teis para automatizar tarefas que precisam ser feitas repetidamente.

Exemplo do dia a dia: contar de 1 a 10, verificar v√°rios itens de uma lista, ou repetir uma mensagem.

üì¶ Tipos de loops no PL/pgSQL
LOOP (loop infinito, precisa de EXIT para parar)

WHILE (repete enquanto a condi√ß√£o for verdadeira)

FOR (repete um n√∫mero fixo de vezes)

1Ô∏è‚É£ LOOP ‚Äì Repeti√ß√£o infinita (usa EXIT para sair)
sql
Copy
Edit
DECLARE
  contador INTEGER := 1;
BEGIN
  LOOP
    RAISE NOTICE 'Contador: %', contador;
    contador := contador + 1;
    
    -- Sai do loop quando chegar em 5
    EXIT WHEN contador > 5;
  END LOOP;
END;
√ötil quando n√£o sabemos quantas vezes algo ser√° repetido.

IMPORTANTE: sempre tenha um EXIT para evitar loops infinitos.

2Ô∏è‚É£ WHILE ‚Äì Enquanto uma condi√ß√£o for verdadeira
sql
Copy
Edit
DECLARE
  numero INTEGER := 1;
BEGIN
  WHILE numero <= 3 LOOP
    RAISE NOTICE 'N√∫mero: %', numero;
    numero := numero + 1;
  END LOOP;
END;
Usado quando queremos repetir at√© uma condi√ß√£o deixar de ser verdadeira.

A condi√ß√£o √© verificada antes de cada repeti√ß√£o.

3Ô∏è‚É£ FOR ‚Äì Repeti√ß√£o com n√∫mero fixo de vezes
sql
Copy
Edit
BEGIN
  FOR i IN 1..4 LOOP
    RAISE NOTICE 'Valor de i: %', i;
  END LOOP;
END;
A mais simples e comum para contar de 1 at√© um n√∫mero espec√≠fico.

i IN 1..4: significa que i vai de 1 at√© 4.

üîÅ FOR REVERSE ‚Äì Contagem regressiva
sql
Copy
Edit
BEGIN
  FOR i IN REVERSE 5..1 LOOP
    RAISE NOTICE 'Contagem: %', i;
  END LOOP;
END;
Conta de tr√°s para frente: 5, 4, 3, 2, 1.

Muito √∫til em contagens regressivas ou checagens ao contr√°rio.

üéØ Onde usar loops na pr√°tica?
Processar todos os clientes de uma lista.

Verificar v√°rias linhas de uma tabela.

Criar relat√≥rios com somas ou m√©dias.

Enviar mensagens autom√°ticas para cada item.

‚ö†Ô∏è Boas pr√°ticas com loops
‚úÖ Sempre tenha uma condi√ß√£o clara de parada (EXIT, limite, etc).

‚úÖ Use nomes de vari√°veis claros como contador, i, cliente_id.

‚ùå Evite repetir a√ß√µes pesadas demais dentro do loop.

‚úÖ Mantenha o c√≥digo organizado e indentado.

‚úÖ Teste bem os loops para evitar erros como loop infinito.

üß† Exemplo pr√°tico com FOR
sql
Copy
Edit
CREATE OR REPLACE FUNCTION listar_nomes()
RETURNS VOID AS $$
DECLARE
  nome_cliente TEXT;
BEGIN
  FOR nome_cliente IN SELECT nome FROM clientes LOOP
    RAISE NOTICE 'Cliente: %', nome_cliente;
  END LOOP;
END;
$$ LANGUAGE plpgsql;
Este exemplo pega todos os nomes da tabela clientes e mostra um por um.

Ideal para mostrar como loops podem acessar tabelas do banco de dados.

‚úÖ Resumo da aula
Loops servem para repetir a√ß√µes automaticamente.

Voc√™ pode usar:

LOOP ‚Üí repeti√ß√£o geral com EXIT

WHILE ‚Üí enquanto a condi√ß√£o for verdadeira

FOR ‚Üí para um n√∫mero fixo de repeti√ß√µes

Loops tornam o c√≥digo mais inteligente e eficiente.

