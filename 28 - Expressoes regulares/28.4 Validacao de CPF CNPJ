üÜî Valida√ß√£o de CPF com Express√£o Regular
‚úÖ Formato com pontua√ß√£o (ex: 123.456.789-09)
sql
Copy
Edit
SELECT * FROM clientes
WHERE cpf ~ '^\d{3}\.\d{3}\.\d{3}-\d{2}$';
üìñ Explica√ß√£o da regex:
Parte	Significado
\d{3}	Tr√™s d√≠gitos
\.	Ponto
-	H√≠fen
\d{2}	Dois d√≠gitos finais
^...$	Come√ßa e termina exatamente com esse padr√£o

Exemplo v√°lido: 123.456.789-09

‚úÖ Formato somente com n√∫meros (ex: 12345678909)
sql
Copy
Edit
SELECT * FROM clientes
WHERE cpf ~ '^\d{11}$';
√ötil se o campo armazena o CPF sem pontua√ß√£o.

üè¢ Valida√ß√£o de CNPJ com Express√£o Regular
‚úÖ Formato com pontua√ß√£o (ex: 12.345.678/0001-95)
sql
Copy
Edit
SELECT * FROM empresas
WHERE cnpj ~ '^\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}$';
üìñ Explica√ß√£o da regex:
Parte	Significado
\d{2}	Dois primeiros d√≠gitos
\.	Ponto
/	Barra
-	H√≠fen

Exemplo v√°lido: 12.345.678/0001-95

‚úÖ Formato somente com n√∫meros (ex: 12345678000195)
sql
Copy
Edit
SELECT * FROM empresas
WHERE cnpj ~ '^\d{14}$';
√ötil quando o campo armazena o CNPJ sem formata√ß√£o.

‚ö†Ô∏è Importante destacar para os alunos:
Essas valida√ß√µes com regex n√£o garantem que o CPF/CNPJ √© v√°lido de verdade, apenas que segue o formato correto.

Para valida√ß√£o real (verificar os d√≠gitos verificadores), √© preciso l√≥gica adicional (em c√≥digo Python, PL/pgSQL etc.).

üéÅ Dica extra: Criando restri√ß√£o CHECK
Se o banco for PostgreSQL, pode aplicar a regra diretamente na tabela:

sql
Copy
Edit
CREATE TABLE clientes (
  cpf TEXT CHECK (cpf ~ '^\d{3}\.\d{3}\.\d{3}-\d{2}$')
);
